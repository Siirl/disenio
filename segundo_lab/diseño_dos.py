numero1 = []
numero2 = []
resultado_suma = []
resultado_resta = []
base = 0
tam=0
temp=False

lista_caracteres = []


def asignar_diccionario():
    global lista_caracteres
    lista_letras_mayuscula = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L","M", "N", "Ñ", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
    lista_letras_minuscula = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l","m", "n", "ñ", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    special_symbols = [
                       '🁂' , '🁃' , '🁄' , '🁅' , '🁆' , '🁇' , '🁈' , '🁉' , '🁊' , '🁋' , '🁌' , '🁍' , '🁎' , '🁏' , '🁐' , '🁑' , '🁒' , '🁓' ,
                       '🁔' , '🁕' , '🁖' , '🁗' , '🁘' , '🁙','🁢' , '🁣' , '🁤' , '🁥' , '🁦' , '🁧' , '🁨' , '🁩' , '🁪' , '🁫' , '🁬' , '🁭' , '🁮' ,
                       '🁯' , '🁰' , '🁱' , '🁲' , '🁳' , '🁴' , '🁵' , '🁶' , '🁷' , '🁸' , '🁹' , '🁺' , '🁻' , '🁼' , '🁽',
                       '🁾' , '🁿' , '🂀' , '🂁' , '🂂' , '🂃' , '🂄' , '🂅' , '🂆' , '🂇' , '🂈' , '🂉' , '🂊' , '🂋' , '🂌' , '🂍' , '🂎' , '🂏' , '🂐' , '🂐' , '🂑' , '🂒' , '🂓',
                       '⚀', '⚁', '⚂', '⚃', '⚄', '⚅','⛀' , '⛁' , '⛂' , '⛃',
                       '≛' , '⋆' , '★' , '⍣' , '☆' , '✡' , '✦' , '✧' , '✩' , '✪' , '✫' , '✬' , '✭' , '✮' , '✯' , '✰' , '⁂' , '⁎' ,
                       '⁑' , '⌑' , '☸' , '✢' , '✣' , '✤' , '✥' , '✱' , '✲' , '✳' , '✴' , '✵' , '✶' , '✷' , '✸' , '✹' , '✺' , '✻' , '✼' ,
                       '✽' , '✾' , '❂' , '❃' , '❇','↕' , '↖' , '↗' , '↘' , '↙' , '↚' , '↛' , '↜' , '↝' , '↞' , '↟' , '↠' , '↡' , '↢' , '↣' , '↤' ,
                       '↥' , '↦' , '↧' , '↨' , '↩' , '↪' , '↫' , '↬' , '↭' , '↮' , '↯' , '↰' , '↱' , '↲' , '↳' , '↴' , '↶' , '↷' , '↸' , '↹' , '↺' , '↻' ,
                       '↼' , '↽' , '↾' , '↿' , '⇀' , '⇁' , '⇂' , '⇃' , '⇄' , '⇅' , '⇆' , '⇇' , '⇈' , '⇉' , '⇊' , '⇋' , '⇌' , '⇍' , '⇎' , '⇏' , '⇕' , '⇖' , '⇗' ,
                       '⇘' , '⇙' , '⇚' , '⇛' , '⇜' , '⇝' , '⇞' , '⇟' , '⇠',
                       '⇡' , '⇢' , '⇣' , '⇤' , '⇥' , '⇦' , '⇧' , '⇨' , '⇩' , '⇪' , '⌅' , '⌆' , '⌤' , '⏎' , '▶' , '☇' , '☈' , '☊' ,
                       '☋' , '☌' , '☍' , '➔' , '➘' , '➙' , '➚' , '➛' , '➜' , '➝' , '➞' , '➟' , '➠' , '➡' , '➢' , '➣' , '➤' , '➥' , '➦' ,
                       '➧' , '➨' , '➩' , '➪' , '➫' , '➬' , '➭' , '➮' , '➯' , '➱' , '➲' , '➳' , '➴' , '➵' , '➶' , '➷' , '➸' , '➹' , '➺' ,
                       '➻' , '➼' , '➽' , '➾' , '⤴' , '⤵' , '↵' , '↓' , '↔' , '←' , '→' , '↑' , '⇐' , '⇑'
                       '⇒' , '⇓' , '⇔' , '⌦' , '⌧' , '⌫' , '⇰' , '⇫' , '⇬' , '⇭' , '⇳' , '⇮' , '⇯' , '⇱' , '⇲' , '⇴' , '⇵' , '⇶' ,
                       '⇷' , '⇸' , '⇹' , '⇺' , '⟵' , '⟶' , '⟷' , '⬄' , '⬀' , '⬁' , '⬂' , '⬃' , '⬅' , '⮕' , '⬆' , '⬇' , '⬈' , '⬉' ,
                       '⬊' , '⬋' , '⬌' , '⬍' , '⇽' , '⇾' , '⇿' , '⬳' , '⟿' , '⤉' , '⤈' , '⇻' , '⇼' , '⬴' , '⤀' , '⬵' , '⤁' , '⬹' ,
                       '⤔' , '⬺' , '⤕' , '⬶' , '⤅' , '⬻' , '⤖' , '⬷' , '⤐' , '⬼' , '⤗' , '⬽' , '⤘' , '⤝' , '⤞' , '⤟' , '⤠' , '⤡' ,
                       '⤢' , '⤣' , '⤤' , '⤥' , '⤦' , '⤪' , '⤨' , '⤧' , '⤩' , '⤭' , '⤮' , '⤯' , '⤰' , '⤱' , '⤲' , '⤫' , '⤬' , '⬐' , '⬎' ,
                       '⬑' , '⬏' , '⤶' , '⤷' , '⥂' , '⥃' , '⥄',
                       'ぁ' , 'あ' , 'ぃ' , 'い' , 'ぅ' , 'う' , 'ぇ' , 'え' , 'ぉ' , 'お' , 'か' , 'が' , 'き' , 'ぎ',
                       'く' , 'ぐ' , 'け' , 'げ' , 'こ' , 'ご' , 'さ' , 'ざ' , 'し' , 'じ' , 'す' , 'ず' , 'せ' , 'ぜ',
                       'そ' , 'ぞ' , 'た' , 'だ' , 'ち' , 'ぢ' , 'っ' , 'つ' , 'づ' , 'て' , 'で' , 'と' , 'ど' , 'な',
                       '𐌰' , '𐌱' , '𐌲' , '𐌳' , '𐌴' , '𐌵' , '𐌶' , '𐌷' , '𐌸' , '𐌹' , '𐌺' , '𐌻' , '𐌼' , '𐌽' , '𐌾' , '𐌿' , '𐍀' ,
                       '𐍁' , '𐍂' , '𐍃' , '𐍄' , '𐍅' , '𐍆' , '𐍇' , '𐍈' , '𐍉' , '𐍊',
                       'Ѐ' , 'Ё' , 'Ђ' , 'Ѓ' , 'Є' , 'п' , 'І' , 'Ї' , 'Ј' , 'Љ' , 'Њ' , 'Ћ' , 'Ќ' , 'Ѝ' , 'Ў' , 'Џ' , 'А' ,
                       'Б' , 'В' , 'Г' , 'Д' , 'ӿ' , 'Ж' , 'З' , 'И' , 'Й' , 'К' , 'Л','Ҷ' , 'ҷ' , 'Ҹ' , 'ҹ' ,
                       'Һ' , 'һ' , 'Ҽ' , 'ҽ' , 'Ҿ' , 'ҿ' , 'Ӏ' , 'Ӂ' , 'ӂ' , 'Ӄ' , 'ӄ' , 'Ӆ' , 'ӆ' , 'Ӈ' , 'ӈ' , 'Ӊ' ,
                       'ӊ' , 'Ӌ' , 'ӌ' , 'Ӎ' , 'ӎ' , 'ӏ' , 'Ӑ' , 'ӑ' , 'Ӓ' , 'ӓ' , 'Ӕ' , 'ӕ' , 'Ӗ' , 'ӗ' , 'Ә' , 'ә' , 'Ӛ' , 'ӛ' , 'Ӝ' , 'ӝ' , 'Ӟ' , 'ӟ'
                       'ㄱ' , 'ㄲ' , 'ㄳ' , 'ㄴ' , 'ㄵ' , 'ㄶ' , 'ㄷ' , 'ㄸ' , 'ㄹ' , 'ㄺ' , 'ㄻ' , 'ㄼ' , 'ㄽ' , 'ㄾ' , 'ㄿ' , 'ㅀ' , 'ㅁ' ,
                       'ㅂ' , 'ㅃ' , 'ㅄ' , 'ㅅ' , 'ㅆ' , 'ㅇ' , 'ㅈ' , 'ㅉ' , 'ㅊ' , 'ㅋ' , 'ㅌ',
                       'ㅍ' , 'ㅎ' , 'ㅏ' , 'ㅐ' , 'ㅑ' , 'ㅒ' , 'ㅓ' , 'ㅔ' , 'ㅕ' , 'ㅖ' , 'ㅗ' , 'ㅘ' , 'ㅙ' , 'ㅚ' , 'ㅛ' , 'ㅜ' , 'ㅝ' ,
                       'ㅞ' , 'ㅟ' , 'ㅠ' , 'ㅡ' , 'ㅢ' , 'ㅥ' , 'ㅦ' , 'ㅧ' , 'ㅨ' , 'ㅩ' , 'ㅪ',
                       'ㅫ' , 'ㅬ' , 'ㅭ' , 'ㅮ','!', '@', '#', '$', '%', '&', '*', '+', '-', '=', '?', '≋','‥','‵','❜','❞','、','。','〃','「','」','『','』','〝','〞','︰','﹁','﹂','﹃','﹄','﹐','﹒','﹔','﹕','！','＃','＄','％','＆','＊','，','．','：','；','？','＠','～','•','…','¿','“','‘','·','′','”','’','‐','‐','‐','–','—','—','—','―',
                       '‗','‚','‛','„','‟','‣','․','″','‴','‶','‷','ʹ','ʺ','ʻ','ʼ','ʽ','ʾ','ʿ','ˀ','ˁ','˂','˃','˄','˅','ˆ','ˇ','ˈ','ˉ','ˊ','ˋ','ˌ','ˍ','ˎ','ˏ','ː','ˑ','˒','˓','˔','˕','˖','˗','˘','˚','˛','˜','˝','˞','ˠ','ˡ','⁘','⁙','⁚','⁛','⁜','⁜','⁝','⁞'
                        ,'❥', '❤', '♡', '۵', '♥', '❣', 'ღ', 'ლ', '❦', '❧', '☙', 'დ', '✾ ', '✽' , '✣', '✤' , '❀' , '✿' , '❃' , '❁' , '❋' , '❊' ,'⚜' , '✥' , '✻' , '✼' ,'❇','❈','❉','⚘','⁕','ꙮ','ꕤ','ꕥ','☘','֍','֎'
                        '𝄀' , '𝄁' , '𝄂' , '𝄃' , '𝄄' , '𝄅' , '𝄆' , '𝄇' , '𝄈' , '𝄉' , '𝄊' , '𝄋' , '𝄌' , '𝄍' , '𝄎' , '𝄏' , '𝄐' , '𝄑' , '𝄒' , '𝄓' , '𝄔' , '𝄕' , '𝄖' , '𝄗' , '𝄘' , '𝄙' , '𝄚' , '𝄛',
                       'ϟ' , '☀' , '☁' , '☂' , '☃' , '☄' , '☉' , '☼' , '☽' , '☾' , '♁' , '♨' , '❄' , '❅' , '❆' , '༄' , '✺' , '☇' , '☈' , '★' , '☆' , '℃' , '℉',
                        '☠' , '☤' , '☥' , '☦' , '☧' , '☨' , '☩' , '☪' , '☫' , '☬' , '☮' , '☭' , '☯' , '☸' , '☽' , '☾' , '♕' , '♚' , '♛' , '✙' , '✚' , '✛' , '✜' , '✝' , '✞' , '✟' , '✠' , '✡' , '✢' , '卍','卐','†' , '☓' , '♁' , '♆',
                        '‱' , '№' , '℗' , '℠' , '℡' , '℀' , '℁' , '℅' , '℆' , '⅍' , '☊' , '☎' , '☏' , '✁' , '✂' , '✃' , '✄' , '✆' , '✇' , '✈' , '✉' , '✎' , '✏' , '✐' , '✑' , '✒' , '™' , '©' , '®' , '‰' , '§' , '¶' , '⌗' , '⌖' , '⌨' , 'Ⓜ' , '♲' , '♳' , '♴' , '♵' , '♶' , '♷' , '♸' ,
                       '♹' , '♺' , '♻' , '♼' , '♽','♈︎' , '♉︎' , '♊︎' , '♋︎' , '♌︎' , '♍︎' , '♎︎' , '♏︎' , '♐︎' , '♑︎' , '♒︎' , '♓︎',
                       'ˇ' , '∛' , '∜' , '☐' , '☑' , '☒' , '✓' , '✔' , '✗' , '✘' , '∨' , '√︎',
                       '♔' , '♕' , '♖' , '♗' , '♘' , '♙' , '♚' , '♛' , '♜' , '♝' , '♞' , '♟︎',
                       '🀄' , '🀀' , '🀀' , '🀂' , '🀃' , '🀅' , '🀆' , '🀇' , '🀈' , '🀉' , '🀊' , '🀋' , '🀌' , '🀍' , '🀎' , '🀏' , '🀐' , '🀑' , '🀒' , '🀓' , '🀔' , '🀕' , '🀖' , '🀗' , '🀘' , '🀙' ,
                       '🀚' , '🀛' , '🀜' , '🀝' , '🀞' , '🀟' , '🀠' , '🀡' , '🀢' , '🀣' , '🀤' , '🀥' , '🀦' , '🀧' , '🀨' , '🀩' , '🀪' , '🀫︎',
                       '♡' , '♢' , '♤' , '♧' , '♣' , '♦' , '♥' , '♠︎','🀰' , '🀱' , '🀲' , '🀳' , '🀴' , '🀵' , '🀶' , '🀷' , '🀸' , '🀹' , '🀺' ,
                       '🀻' , '🀼' , '🀽' , '🀾' , '🀿' , '🁀' , '🁁' , 'ㅰ'

                       ]
    for temp in range (10): #Asigna los primeros 10 valores
        lista_caracteres.append(temp)
    lista_caracteres.extend(lista_letras_mayuscula)
    lista_caracteres.extend(lista_letras_minuscula)
    lista_caracteres.extend(special_symbols)

def traduccion(num):
    cadena_traducida =[]
    global lista_caracteres
    i = len(str(num))
    for cont in range(i - 1, -1, -1):
        print(num[cont])
        print(lista_caracteres[num[cont]], end="")
    cadena_traducida.append(lista_caracteres[int(num)])
    return cadena_traducida

def asignar_base(base_num):
    global base
    base = base_num

def operar():
    global resultado_resta, resultado_suma
    global numero1
    global numero2
    global tam
    num=numero1.copy()
    num2=numero2.copy()
    if temp==False:
        tam = arreglar_num()
        realizar_operacion_resta(num,num2,tam)
        realizar_operacion_suma(num,num2,tam)
    else:
        num.reverse()
        num2.reverse()
        realizar_operacion_resta(num,num2,tam)
        realizar_operacion_suma(num,num2,tam)
    print("Suma: ",resultado_suma,"\nResta: ",resultado_resta)
    
    

def asignar_numeros(num1, num2):
    global numero1
    global numero2
    numero1 = num1
    numero2 = num2

def arreglar_num():
    global numero1
    global numero2
    global temp
    tam = max(len(numero1), len(numero2))
    numero1 = [0] * (tam - len(numero1)) + numero1
    numero2 = [0] * (tam - len(numero2)) + numero2
    numero1.reverse()
    numero1.append(0)
    numero2.reverse()
    numero2.append(0)
    temp=True
    return tam

def realizar_operacion_suma(num,num2,tam):
    global resultado_suma
    global base
    resultado_suma.clear()
    num,num2=verificar_numeros(num,num2,tam)
    num.append(0)
    num2.append(0)
    base = int(base)
    for x in range(tam+1):
        operacion = int(num[x])+int(num2[x])
        if operacion>=base:
            num[x+1]= num[x+1]+1
            operacion = operacion-base
        resultado_suma.append(operacion)
    resultado_suma.reverse()

def realizar_operacion_resta(num,num2,tam):
    global resultado_resta
    global base
    resultado_resta.clear()
    base = int(base)
    num,num2=verificar_numeros(num,num2,tam)
    num.reverse()
    num2.reverse()
    for x in range(tam):
        if (int(num[x])<int(num2[x])):
            num[x+1]=num[x+1]-1
            num[x]=num[x]+base
        operacion = int(num[x])-int(num2[x])
        resultado_resta.append(operacion)
    resultado_resta.reverse()

        
def verificar_numeros(num,num2,tam):
    global numero1
    global numero2
    numero1.reverse()
    numero2.reverse()
    num=numero1.copy()
    num2=numero2.copy()
    for x in range(tam):
        if num[tam-x-1] < num2[tam-x-1]:
            return num2,num
        else:
            return num,num2
        
